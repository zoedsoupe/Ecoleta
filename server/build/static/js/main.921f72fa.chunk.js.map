{"version":3,"sources":["assets/logo.svg","pages/Home/index.tsx","components/Dropzone/index.tsx","services/api.ts","pages/CreatePoint/index.tsx","routes.tsx","App.tsx","index.tsx"],"names":["module","exports","Home","id","className","src","logo","alt","to","Dropzone","onFileUpload","useState","selectedFileUrl","setSelectedFileUrl","onDrop","useCallback","acceptedFiles","file","fileUrl","URL","createObjectURL","useDropzone","accept","getRootProps","getInputProps","isDragActive","api","axios","create","baseURL","CreatePoint","items","setItems","ufs","setUfs","cities","setCities","selectedFile","setSelectedFile","initialPosition","setInitialPosition","name","email","wpp","formData","setFormData","selectedUf","setSelectedUf","selectedCity","setSelectedCity","selectedItems","setSelectedItems","selectedPosition","setSelectedPosition","history","useHistory","handleInputChange","e","target","value","a","preventDefault","uf","city","lat","long","data","FormData","append","String","join","post","push","console","log","message","useEffect","get","then","res","ufInitials","map","sigla","cityNames","nome","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","onSubmit","htmlFor","type","onChange","Map","center","zoom","onclick","latlng","lng","TileLayer","attribution","url","Marker","key","item","onClick","findIndex","filteredItems","filter","handleSelectedItems","includes","image_url","title","Routes","component","path","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.921f72fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.47c4581a.svg\";","import React from \"react\";\nimport { FiLogIn } from \"react-icons/fi\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Home.css\";\nimport logo from \"../../assets/logo.svg\";\nconst Home = () => {\n  return (\n    <div id=\"page-home\">\n      <div className=\"content\">\n        <header>\n          <img src={logo} alt=\"Ecoleta\" />\n        </header>\n        <main>\n          <h1>Seu marketplace de coleta de resíduos</h1>\n          <p>\n            Ajudamos pessoas a encontrarem pontos de coleta de forma eficiente!\n          </p>\n          <Link to=\"/create-point\">\n            <span>\n              <FiLogIn />\n            </span>\n            <strong>Cadastre um ponto de coleta</strong>\n          </Link>\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useCallback, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\n\nimport \"./styles.css\";\n\ninterface Props {\n  onFileUpload: (file: File) => void;\n}\n\nconst Dropzone: React.FC<Props> = ({ onFileUpload }) => {\n  const [selectedFileUrl, setSelectedFileUrl] = useState(\"\");\n\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      const file = acceptedFiles[0];\n\n      const fileUrl = URL.createObjectURL(file);\n\n      setSelectedFileUrl(fileUrl);\n      onFileUpload(file);\n    },\n    [onFileUpload]\n  );\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: \"image/*\",\n  });\n\n  return (\n    <div className=\"dropzone\" {...getRootProps()}>\n      <input {...getInputProps()} accept=\"image/*\" />\n\n      {selectedFileUrl ? (\n        <img src={selectedFileUrl} alt=\"Thumbnail do ponto de coleta\" />\n      ) : isDragActive ? (\n        <p>Solte a imagem aqui ...</p>\n      ) : (\n        <p>Arraste e solte o arquivo aqui ou clique para procurá-lo</p>\n      )}\n    </div>\n  );\n};\n\nexport default Dropzone;\n","import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"http://localhost:3333\",\n});\n\nexport default api;\n","//* types, react hooks\nimport React, { useState, useEffect, ChangeEvent, FormEvent } from \"react\";\n//* icons\nimport { FiArrowLeft } from \"react-icons/fi\";\n//* router and navigation\nimport { Link, useHistory } from \"react-router-dom\";\n//* map\nimport { Map, TileLayer, Marker } from \"react-leaflet\";\n//* map event type\nimport { LeafletMouseEvent } from \"leaflet\";\n//* consume apis\nimport axios from \"axios\";\n\nimport Dropzone from \"../../components/Dropzone\";\n\nimport \"./CreatePoint.css\";\n\nimport api from \"../../services/api\";\n\nimport logo from \"../../assets/logo.svg\";\n\n//* define types to Items\ninterface Item {\n  id: number;\n  title: string;\n  image_url: string;\n}\n\n//* type to uf\ninterface ibgeUfResponse {\n  sigla: string;\n}\n\n//* type to city\ninterface ibgeCityResponse {\n  nome: string;\n}\n\nconst CreatePoint = () => {\n  //* variable to receive items\n  const [items, setItems] = useState<Item[]>([]);\n  //* variable to receive ufs\n  const [ufs, setUfs] = useState<string[]>([]);\n  //* variable to receive cities\n  const [cities, setCities] = useState<string[]>([]);\n\n  const [selectedFile, setSelectedFile] = useState<File>();\n\n  //* variable to receive the map initial position\n  const [initialPosition, setInitialPosition] = useState<[number, number]>([\n    0,\n    0,\n  ]);\n\n  //* variable to receive all form data\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    wpp: \"\",\n  });\n\n  //* handle the selects for uf, city, map position and items\n  const [selectedUf, setSelectedUf] = useState(\"0\");\n  const [selectedCity, setSelectedCity] = useState(\"0\");\n  const [selectedItems, setSelectedItems] = useState<number[]>([]);\n  const [selectedPosition, setSelectedPosition] = useState<[number, number]>([\n    0,\n    0,\n  ]);\n\n  const history = useHistory();\n\n  //* ..., []) === run once when page loads\n\n  //* get all items from api and stores on items const\n  useEffect(() => {\n    api.get(\"items\").then((res) => setItems(res.data));\n  }, []);\n\n  //* get all ufs from ibge api and stores on ufs const\n  useEffect(() => {\n    axios\n      .get<ibgeUfResponse[]>(\n        \"https://servicodados.ibge.gov.br/api/v1/localidades/estados\"\n      )\n      .then((res) => {\n        const ufInitials = res.data.map((uf) => uf.sigla);\n\n        setUfs(ufInitials);\n      });\n  }, []);\n\n  //* get all cities from ibge api and stores on cities const and executes every time that selected UF changes\n  useEffect(() => {\n    if (selectedUf !== \"0\") {\n      axios\n        .get<ibgeCityResponse[]>(\n          `https://servicodados.ibge.gov.br/api/v1/localidades/estados/${selectedUf}/municipios`\n        )\n        .then((res) => {\n          const cityNames = res.data.map((city) => city.nome);\n\n          setCities(cityNames);\n        });\n    }\n    return;\n  }, [selectedUf]);\n\n  //* get the actual user geolocation from browser\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      const { latitude, longitude } = position.coords;\n\n      setInitialPosition([latitude, longitude]);\n    });\n  }, []);\n\n  //* handle the selected uf\n  function handleSelectedUf(e: ChangeEvent<HTMLSelectElement>) {\n    const uf = e.target.value;\n\n    setSelectedUf(uf);\n  }\n\n  //* handle the selected city\n  function handleSelectedCity(e: ChangeEvent<HTMLSelectElement>) {\n    const city = e.target.value;\n\n    setSelectedCity(city);\n  }\n\n  //* handle the selected position to place a marker\n  function handleMapClick(e: LeafletMouseEvent) {\n    setSelectedPosition([e.latlng.lat, e.latlng.lng]);\n  }\n\n  //* store all the form data\n  function handleInputChange(e: ChangeEvent<HTMLInputElement>) {\n    const { name, value } = e.target;\n\n    //* copy all the existing data and add new\n    setFormData({ ...formData, [name]: value });\n  }\n\n  //* handle the selected or disselected items\n  function handleSelectedItems(id: number) {\n    const alreadySelected = selectedItems.findIndex((item) => item === id);\n\n    if (alreadySelected > -1) {\n      const filteredItems = selectedItems.filter((item) => item !== id);\n\n      setSelectedItems(filteredItems);\n    } else setSelectedItems([...selectedItems, id]);\n  }\n\n  //* submit all data to the api and create a new point\n  async function handleSubmit(e: FormEvent) {\n    e.preventDefault();\n\n    const { name, email, wpp } = formData;\n    const uf = selectedUf;\n    const city = selectedCity;\n    const [lat, long] = selectedPosition;\n    const items = selectedItems;\n\n    const data = new FormData();\n\n    data.append(\"name\", name);\n    data.append(\"email\", email);\n    data.append(\"wpp\", wpp);\n    data.append(\"uf\", uf);\n    data.append(\"city\", city);\n    data.append(\"lat\", String(lat));\n    data.append(\"long\", String(long));\n    data.append(\"items\", items.join(\",\"));\n\n    if (selectedFile) data.append(\"img\", selectedFile);\n\n    try {\n      await api.post(\"points\", data);\n\n      history.push(\"/\");\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  return (\n    <div id=\"page-create-point\">\n      <header>\n        <img src={logo} alt=\"Ecoleta\" />\n        <Link to=\"/\">\n          <FiArrowLeft />\n          Voltar para home\n        </Link>\n      </header>\n\n      <form onSubmit={handleSubmit}>\n        <h1>\n          Cadastro do <br /> ponto de coleta\n        </h1>\n\n        <Dropzone onFileUpload={setSelectedFile} />\n\n        <fieldset>\n          <legend>\n            <h2>Dados</h2>\n          </legend>\n\n          <div className=\"field\">\n            <label htmlFor=\"name\">Nome da ententidade</label>\n            <input\n              type=\"text\"\n              name=\"name\"\n              id=\"name\"\n              onChange={handleInputChange}\n            />\n          </div>\n\n          <div className=\"field-group\">\n            <div className=\"field\">\n              <label htmlFor=\"email\">Email</label>\n              <input\n                type=\"email\"\n                name=\"email\"\n                id=\"email\"\n                onChange={handleInputChange}\n              />\n            </div>\n            <div className=\"field\">\n              <label htmlFor=\"wpp\">Whatsapp</label>\n              <input\n                type=\"tel\"\n                name=\"wpp\"\n                id=\"wpp\"\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n        </fieldset>\n\n        <fieldset>\n          <legend>\n            <h2>Endereço</h2>\n            <span>Selecione o endereço no mapa</span>\n          </legend>\n          //* see leaflet documentation\n          <Map center={initialPosition} zoom={15} onclick={handleMapClick}>\n            <TileLayer\n              attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            <Marker position={selectedPosition} />\n          </Map>\n          <div className=\"field-group\">\n            <div className=\"field\">\n              <label htmlFor=\"uf\">Estado (UF)</label>\n              <select\n                name=\"uf\"\n                id=\"uf\"\n                onChange={handleSelectedUf}\n                value={selectedUf}\n              >\n                <option value=\"0\">Selecione uma UF</option>\n                {ufs.map((uf) => (\n                  <option key={uf} value={uf}>\n                    {uf}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"field\">\n              <label htmlFor=\"city\">Cidade</label>\n              <select\n                name=\"city\"\n                id=\"city\"\n                value={selectedCity}\n                onChange={handleSelectedCity}\n              >\n                <option value=\"0\">Selecione uma cidade</option>\n                {cities.map((city) => (\n                  <option key={city} value={city}>\n                    {city}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </fieldset>\n\n        <fieldset>\n          <legend>\n            <h2>Itens de coleta</h2>\n            <span>Selecione um ou mais itens abaixo</span>\n          </legend>\n\n          <ul className=\"items-grid\">\n            {items.map((item) => (\n              <li\n                key={item.id}\n                onClick={() => handleSelectedItems(item.id)}\n                className={selectedItems.includes(item.id) ? \"selected\" : \"\"}\n              >\n                <img src={item.image_url} alt={item.title} />\n                <span>{item.title}</span>\n              </li>\n            ))}\n          </ul>\n        </fieldset>\n\n        <button type=\"submit\">Cadastrar ponto de coleta</button>\n      </form>\n    </div>\n  );\n};\n\nexport default CreatePoint;\n","import React from \"react\";\nimport { Route, BrowserRouter } from \"react-router-dom\";\n\nimport Home from \"./pages/Home\";\nimport CreatePoint from \"./pages/CreatePoint\";\nconst Routes = () => {\n  return (\n    <BrowserRouter>\n      <Route component={Home} path=\"/\" exact />\n      <Route component={CreatePoint} path=\"/create-point\" />\n    </BrowserRouter>\n  );\n};\n\nexport default Routes;\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Routes from \"./routes\"\n\nfunction App() {\n  return <Routes />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}